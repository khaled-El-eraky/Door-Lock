
Door_Lock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b44  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00000b44  00000bb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000180  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000023ae  00000000  00000000  00000e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000c4d  00000000  00000000  000031e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000a31  00000000  00000000  00003e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000374  00000000  00000000  00004864  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000669  00000000  00000000  00004bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000fbc  00000000  00000000  00005241  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000158  00000000  00000000  000061fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	2d 03       	fmul	r18, r21
  56:	34 03       	mulsu	r19, r20
  58:	34 03       	mulsu	r19, r20
  5a:	34 03       	mulsu	r19, r20
  5c:	34 03       	mulsu	r19, r20
  5e:	34 03       	mulsu	r19, r20
  60:	34 03       	mulsu	r19, r20
  62:	33 03       	mulsu	r19, r19
  64:	34 03       	mulsu	r19, r20
  66:	34 03       	mulsu	r19, r20
  68:	34 03       	mulsu	r19, r20
  6a:	34 03       	mulsu	r19, r20
  6c:	34 03       	mulsu	r19, r20
  6e:	ae 02       	muls	r26, r30
  70:	bb 02       	muls	r27, r27
  72:	c8 02       	muls	r28, r24
  74:	d5 02       	muls	r29, r21
  76:	e2 02       	muls	r30, r18
  78:	ef 02       	muls	r30, r31
  7a:	fc 02       	muls	r31, r28
  7c:	09 03       	fmul	r16, r17
  7e:	15 03       	mulsu	r17, r21
  80:	21 03       	mulsu	r18, r17

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf e5       	ldi	r28, 0x5F	; 95
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	11 e0       	ldi	r17, 0x01	; 1
  90:	a0 e6       	ldi	r26, 0x60	; 96
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e4 e4       	ldi	r30, 0x44	; 68
  96:	fb e0       	ldi	r31, 0x0B	; 11
  98:	02 c0       	rjmp	.+4      	; 0x9e <__do_copy_data+0x10>
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	ae 32       	cpi	r26, 0x2E	; 46
  a0:	b1 07       	cpc	r27, r17
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0xc>
  a4:	0e 94 77 04 	call	0x8ee	; 0x8ee <main>
  a8:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <DIO_pinConfigure>:
 */ 

#include "DIO.h"

void	DIO_pinConfigure(DIO_Struct * Dio, pinNumber pinNum, pinMode Mode)
{
  b0:	fc 01       	movw	r30, r24
	switch(Mode)
  b2:	41 30       	cpi	r20, 0x01	; 1
  b4:	b1 f0       	breq	.+44     	; 0xe2 <DIO_pinConfigure+0x32>
  b6:	18 f0       	brcs	.+6      	; 0xbe <DIO_pinConfigure+0xe>
  b8:	42 30       	cpi	r20, 0x02	; 2
  ba:	29 f1       	breq	.+74     	; 0x106 <DIO_pinConfigure+0x56>
  bc:	08 95       	ret
	{
		case INPUT_FLOAT:
		CLEARBIT(Dio->ddr.allRegister,pinNum);
  be:	21 81       	ldd	r18, Z+1	; 0x01
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	ac 01       	movw	r20, r24
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_pinConfigure+0x1c>
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_pinConfigure+0x18>
  d0:	ba 01       	movw	r22, r20
  d2:	60 95       	com	r22
  d4:	86 2f       	mov	r24, r22
  d6:	82 23       	and	r24, r18
  d8:	81 83       	std	Z+1, r24	; 0x01
		CLEARBIT(Dio->port.allRegister,pinNum);
  da:	82 81       	ldd	r24, Z+2	; 0x02
  dc:	68 23       	and	r22, r24
  de:	62 83       	std	Z+2, r22	; 0x02
		break;
  e0:	08 95       	ret
		case INPUT_PULLUP:
		CLEARBIT(Dio->ddr.allRegister,pinNum);
  e2:	21 81       	ldd	r18, Z+1	; 0x01
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	ac 01       	movw	r20, r24
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_pinConfigure+0x40>
  ec:	44 0f       	add	r20, r20
  ee:	55 1f       	adc	r21, r21
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_pinConfigure+0x3c>
  f4:	ba 01       	movw	r22, r20
  f6:	84 2f       	mov	r24, r20
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	81 83       	std	Z+1, r24	; 0x01
		SETBIT(Dio->port.allRegister,pinNum);
  fe:	82 81       	ldd	r24, Z+2	; 0x02
 100:	68 2b       	or	r22, r24
 102:	62 83       	std	Z+2, r22	; 0x02
		break;
 104:	08 95       	ret
		case OUTPUT:
		SETBIT(Dio->ddr.allRegister,pinNum);
 106:	21 81       	ldd	r18, Z+1	; 0x01
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	ac 01       	movw	r20, r24
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_pinConfigure+0x64>
 110:	44 0f       	add	r20, r20
 112:	55 1f       	adc	r21, r21
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_pinConfigure+0x60>
 118:	ba 01       	movw	r22, r20
 11a:	62 2b       	or	r22, r18
 11c:	61 83       	std	Z+1, r22	; 0x01
 11e:	08 95       	ret

00000120 <DIO_pinWrite>:
	}
}

void	DIO_pinWrite(DIO_Struct * Dio, pinNumber pinNum, digitalState State)
{
	switch(State)
 120:	44 23       	and	r20, r20
 122:	89 f0       	breq	.+34     	; 0x146 <DIO_pinWrite+0x26>
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	f1 f4       	brne	.+60     	; 0x164 <DIO_pinWrite+0x44>
	{
		case HIGH:
		SETBIT(Dio->port.allRegister,pinNum);
 128:	fc 01       	movw	r30, r24
 12a:	42 81       	ldd	r20, Z+2	; 0x02
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	f9 01       	movw	r30, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_pinWrite+0x18>
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_pinWrite+0x14>
 13c:	bf 01       	movw	r22, r30
 13e:	64 2b       	or	r22, r20
 140:	fc 01       	movw	r30, r24
 142:	62 83       	std	Z+2, r22	; 0x02
		break;
 144:	08 95       	ret
		case LOW:
		CLEARBIT(Dio->port.allRegister,pinNum);
 146:	fc 01       	movw	r30, r24
 148:	42 81       	ldd	r20, Z+2	; 0x02
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	f9 01       	movw	r30, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_pinWrite+0x36>
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_pinWrite+0x32>
 15a:	bf 01       	movw	r22, r30
 15c:	60 95       	com	r22
 15e:	64 23       	and	r22, r20
 160:	fc 01       	movw	r30, r24
 162:	62 83       	std	Z+2, r22	; 0x02
 164:	08 95       	ret

00000166 <DIO_pinRead>:

digitalState DIO_pinRead(DIO_Struct * Dio, pinNumber pinNum)
{
	digitalState returnvar = LOW;
	
	switch(READBIT(Dio->pin.allRegister,pinNum))
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	06 2e       	mov	r0, r22
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_pinRead+0x10>
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_pinRead+0xc>
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	82 23       	and	r24, r18
 17e:	93 23       	and	r25, r19
 180:	9c 01       	movw	r18, r24
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_pinRead+0x22>
 184:	35 95       	asr	r19
 186:	27 95       	ror	r18
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_pinRead+0x1e>
 18c:	21 30       	cpi	r18, 0x01	; 1
 18e:	31 05       	cpc	r19, r1
 190:	11 f0       	breq	.+4      	; 0x196 <DIO_pinRead+0x30>
	}
}

digitalState DIO_pinRead(DIO_Struct * Dio, pinNumber pinNum)
{
	digitalState returnvar = LOW;
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret
	{
		case LOW:
		returnvar = LOW;
		break;
		case HIGH:
		returnvar = HIGH;
 196:	81 e0       	ldi	r24, 0x01	; 1
		break;
		default:
		break;
	}
	return returnvar;
}
 198:	08 95       	ret

0000019a <DIO_portConfigure>:


void	DIO_portConfigure(DIO_Struct * Dio,vuint8_t ConfigByte)
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	1f 92       	push	r1
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	69 83       	std	Y+1, r22	; 0x01
	Dio->ddr.allRegister=ConfigByte;
 1a6:	29 81       	ldd	r18, Y+1	; 0x01
 1a8:	fc 01       	movw	r30, r24
 1aa:	21 83       	std	Z+1, r18	; 0x01
}	
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <DIO_portWrite>:

void	DIO_portWrite(DIO_Struct * Dio, vuint8_t Data)
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	1f 92       	push	r1
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	69 83       	std	Y+1, r22	; 0x01
	Dio->port.allRegister=Data;
 1c0:	29 81       	ldd	r18, Y+1	; 0x01
 1c2:	fc 01       	movw	r30, r24
 1c4:	22 83       	std	Z+2, r18	; 0x02
}
 1c6:	0f 90       	pop	r0
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <UART_sendByte>:
	UCSRC |= (1<<7) | (1<<2) | (1<<1);   /*select UCSRC and set the char size with 8 bit*/
}

void	UART_sendByte(uint8_t Data)
{
	while((UCSRA & (1<<5)) == 0)
 1ce:	5d 9b       	sbis	0x0b, 5	; 11
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <UART_sendByte>
	{
		
	}
	UDR = Data;
 1d2:	8c b9       	out	0x0c, r24	; 12
 1d4:	08 95       	ret

000001d6 <UART_Send_string>:
	}
			
	return PASS;
}
void UART_Send_string(uint8_t string[])
{
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	ec 01       	movw	r28, r24
	int i=0;
	while ( string[i] > 0)
 1dc:	88 81       	ld	r24, Y
 1de:	88 23       	and	r24, r24
 1e0:	31 f0       	breq	.+12     	; 0x1ee <UART_Send_string+0x18>
 1e2:	21 96       	adiw	r28, 0x01	; 1
	UART_sendByte(string[i++]);
 1e4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <UART_sendByte>
	return PASS;
}
void UART_Send_string(uint8_t string[])
{
	int i=0;
	while ( string[i] > 0)
 1e8:	89 91       	ld	r24, Y+
 1ea:	81 11       	cpse	r24, r1
 1ec:	fb cf       	rjmp	.-10     	; 0x1e4 <UART_Send_string+0xe>
	UART_sendByte(string[i++]);
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <keypad_setup>:
 */ 

#include "KEYPAD.h"
#include <util/delay.h>

void keypad_setup( DIO_Struct *	 keypad_Dio){
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <keypad_setup+0xa>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	8c 01       	movw	r16, r24
	
	vuint8_t  direction_byte=0xF0;
 204:	80 ef       	ldi	r24, 0xF0	; 240
 206:	89 83       	std	Y+1, r24	; 0x01
	vuint8_t  port_byte=0xFF;
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	8a 83       	std	Y+2, r24	; 0x02
	
	/*Low order bits is input pull_up and high order bits is output and write 1 to it*/
	DIO_portConfigure(keypad_Dio , direction_byte);
 20c:	69 81       	ldd	r22, Y+1	; 0x01
 20e:	c8 01       	movw	r24, r16
 210:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_portConfigure>
	DIO_portWrite(keypad_Dio , port_byte);
 214:	6a 81       	ldd	r22, Y+2	; 0x02
 216:	c8 01       	movw	r24, r16
 218:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_portWrite>
}
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <Keypad_pressed_key>:
   Rows >> from pin4 to pin7 as output
   Column >>from pin0 to pin3 as input
   when the rows out logic 0 and column 
   read zero it return the array element
   */
uint8_t Keypad_pressed_key( DIO_Struct * Keypad_Dio){
 22a:	5f 92       	push	r5
 22c:	6f 92       	push	r6
 22e:	7f 92       	push	r7
 230:	8f 92       	push	r8
 232:	9f 92       	push	r9
 234:	af 92       	push	r10
 236:	bf 92       	push	r11
 238:	cf 92       	push	r12
 23a:	df 92       	push	r13
 23c:	ef 92       	push	r14
 23e:	ff 92       	push	r15
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	2d 97       	sbiw	r28, 0x0d	; 13
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	6c 01       	movw	r12, r24
	uint8_t button_pressed=KEY_NOT_PRESSED;
	uint8_t KeyPad_elemnts [ROW_NUM][COL_NUM]=
 25a:	8c e0       	ldi	r24, 0x0C	; 12
 25c:	e0 e6       	ldi	r30, 0x60	; 96
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	de 01       	movw	r26, r28
 262:	11 96       	adiw	r26, 0x01	; 1
 264:	01 90       	ld	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	8a 95       	dec	r24
 26a:	e1 f7       	brne	.-8      	; 0x264 <Keypad_pressed_key+0x3a>
 26c:	ce 01       	movw	r24, r28
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	5c 01       	movw	r10, r24
 272:	e1 2c       	mov	r14, r1
 274:	f1 2c       	mov	r15, r1
   Column >>from pin0 to pin3 as input
   when the rows out logic 0 and column 
   read zero it return the array element
   */
uint8_t Keypad_pressed_key( DIO_Struct * Keypad_Dio){
	uint8_t button_pressed=KEY_NOT_PRESSED;
 276:	0f 2e       	mov	r0, r31
 278:	fa e0       	ldi	r31, 0x0A	; 10
 27a:	6f 2e       	mov	r6, r31
 27c:	f0 2d       	mov	r31, r0
    };
	
	for (uint8_t Row = 0; Row < ROW_NUM; Row++)
	
	{ 
		vuint8_t Row_byte = ~(0b00010000 << Row);
 27e:	68 94       	set
 280:	88 24       	eor	r8, r8
 282:	84 f8       	bld	r8, 4
 284:	91 2c       	mov	r9, r1
		DIO_portWrite(Keypad_Dio , Row_byte);

		for (uint8_t Col = 0; Col < COL_NUM; Col++)
 286:	51 2c       	mov	r5, r1
    };
	
	for (uint8_t Row = 0; Row < ROW_NUM; Row++)
	
	{ 
		vuint8_t Row_byte = ~(0b00010000 << Row);
 288:	94 01       	movw	r18, r8
 28a:	0e 2c       	mov	r0, r14
 28c:	02 c0       	rjmp	.+4      	; 0x292 <Keypad_pressed_key+0x68>
 28e:	22 0f       	add	r18, r18
 290:	33 1f       	adc	r19, r19
 292:	0a 94       	dec	r0
 294:	e2 f7       	brpl	.-8      	; 0x28e <Keypad_pressed_key+0x64>
 296:	20 95       	com	r18
 298:	2d 87       	std	Y+13, r18	; 0x0d
		DIO_portWrite(Keypad_Dio , Row_byte);
 29a:	6d 85       	ldd	r22, Y+13	; 0x0d
 29c:	c6 01       	movw	r24, r12
 29e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_portWrite>
 2a2:	85 01       	movw	r16, r10

		for (uint8_t Col = 0; Col < COL_NUM; Col++)
 2a4:	75 2c       	mov	r7, r5
		{
			if (!(DIO_pinRead(Keypad_Dio, Col)))
 2a6:	67 2d       	mov	r22, r7
 2a8:	c6 01       	movw	r24, r12
 2aa:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_pinRead>
 2ae:	81 11       	cpse	r24, r1
 2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <Keypad_pressed_key+0x98>
			{ 
				button_pressed= KeyPad_elemnts[Row][Col];
 2b2:	f8 01       	movw	r30, r16
 2b4:	60 80       	ld	r6, Z
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	8f e8       	ldi	r24, 0x8F	; 143
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <Keypad_pressed_key+0x90>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <Keypad_pressed_key+0x96>
 2c0:	00 00       	nop
	
	{ 
		vuint8_t Row_byte = ~(0b00010000 << Row);
		DIO_portWrite(Keypad_Dio , Row_byte);

		for (uint8_t Col = 0; Col < COL_NUM; Col++)
 2c2:	73 94       	inc	r7
 2c4:	0f 5f       	subi	r16, 0xFF	; 255
 2c6:	1f 4f       	sbci	r17, 0xFF	; 255
 2c8:	93 e0       	ldi	r25, 0x03	; 3
 2ca:	79 12       	cpse	r7, r25
 2cc:	ec cf       	rjmp	.-40     	; 0x2a6 <Keypad_pressed_key+0x7c>
 2ce:	ef ef       	ldi	r30, 0xFF	; 255
 2d0:	ee 1a       	sub	r14, r30
 2d2:	fe 0a       	sbc	r15, r30
 2d4:	f3 e0       	ldi	r31, 0x03	; 3
 2d6:	af 0e       	add	r10, r31
 2d8:	b1 1c       	adc	r11, r1
	{'4','5','6'},
	{'7','8','9'},
    {'*','0','#'},
    };
	
	for (uint8_t Row = 0; Row < ROW_NUM; Row++)
 2da:	84 e0       	ldi	r24, 0x04	; 4
 2dc:	e8 16       	cp	r14, r24
 2de:	f1 04       	cpc	r15, r1
 2e0:	99 f6       	brne	.-90     	; 0x288 <Keypad_pressed_key+0x5e>
			}
			
		}
	}
	return button_pressed;
};
 2e2:	86 2d       	mov	r24, r6
 2e4:	2d 96       	adiw	r28, 0x0d	; 13
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	ef 90       	pop	r14
 2fc:	df 90       	pop	r13
 2fe:	cf 90       	pop	r12
 300:	bf 90       	pop	r11
 302:	af 90       	pop	r10
 304:	9f 90       	pop	r9
 306:	8f 90       	pop	r8
 308:	7f 90       	pop	r7
 30a:	6f 90       	pop	r6
 30c:	5f 90       	pop	r5
 30e:	08 95       	ret

00000310 <Send_instruction>:
	
	void Send_instruction(uint8_t instruction)
	{

		/* RW, RS Should be 0 when Writing instructions to LCD */
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RS);
 310:	c0 98       	cbi	0x18, 0	; 24
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RW);
 312:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 314:	ef e9       	ldi	r30, 0x9F	; 159
 316:	ff e0       	ldi	r31, 0x0F	; 15
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <Send_instruction+0x8>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <Send_instruction+0xe>
 31e:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		
		/* Enable LCD E=1 */
		SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 320:	c2 9a       	sbi	0x18, 2	; 24
 322:	ef e9       	ldi	r30, 0x9F	; 159
 324:	ff e0       	ldi	r31, 0x0F	; 15
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <Send_instruction+0x16>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <Send_instruction+0x1c>
 32c:	00 00       	nop
			_delay_ms(1); 
		#else 
			
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 32e:	98 b3       	in	r25, 0x18	; 24
 330:	9f 70       	andi	r25, 0x0F	; 15
 332:	98 bb       	out	0x18, r25	; 24
				LCD_Data_IO->port.allRegister |= (instruction & 0xF0);
 334:	98 b3       	in	r25, 0x18	; 24
 336:	28 2f       	mov	r18, r24
 338:	20 7f       	andi	r18, 0xF0	; 240
 33a:	92 2b       	or	r25, r18
 33c:	98 bb       	out	0x18, r25	; 24
 33e:	ef e9       	ldi	r30, 0x9F	; 159
 340:	ff e0       	ldi	r31, 0x0F	; 15
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <Send_instruction+0x32>
 346:	00 c0       	rjmp	.+0      	; 0x348 <Send_instruction+0x38>
 348:	00 00       	nop
			#endif
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
		
			/* disable LCD E=0 */
			CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 34a:	c2 98       	cbi	0x18, 2	; 24
 34c:	ef e9       	ldi	r30, 0x9F	; 159
 34e:	ff e0       	ldi	r31, 0x0F	; 15
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <Send_instruction+0x40>
 354:	00 c0       	rjmp	.+0      	; 0x356 <Send_instruction+0x46>
 356:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			
			/* Enable LCD E=1 */
			SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 358:	c2 9a       	sbi	0x18, 2	; 24
 35a:	ef e9       	ldi	r30, 0x9F	; 159
 35c:	ff e0       	ldi	r31, 0x0F	; 15
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <Send_instruction+0x4e>
 362:	00 c0       	rjmp	.+0      	; 0x364 <Send_instruction+0x54>
 364:	00 00       	nop
			/* delay for processing PW min 450ns */
			_delay_ms(1);
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 366:	98 b3       	in	r25, 0x18	; 24
 368:	9f 70       	andi	r25, 0x0F	; 15
 36a:	98 bb       	out	0x18, r25	; 24
				LCD_Data_IO->port.allRegister |= ((instruction <<4) );
 36c:	28 b3       	in	r18, 0x18	; 24
 36e:	f0 e1       	ldi	r31, 0x10	; 16
 370:	8f 9f       	mul	r24, r31
 372:	c0 01       	movw	r24, r0
 374:	11 24       	eor	r1, r1
 376:	82 2b       	or	r24, r18
 378:	88 bb       	out	0x18, r24	; 24
 37a:	8f e9       	ldi	r24, 0x9F	; 159
 37c:	9f e0       	ldi	r25, 0x0F	; 15
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <Send_instruction+0x6e>
 382:	00 c0       	rjmp	.+0      	; 0x384 <Send_instruction+0x74>
 384:	00 00       	nop
				LCD_Data_IO->port.allRegister |= ((instruction) & 0x0f);
			#endif
				/* Data set-up time delay  Tdsw = 195 ns */
				_delay_ms(1);
				/* disable LCD E=0 */
				CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 386:	c2 98       	cbi	0x18, 2	; 24
 388:	ef e9       	ldi	r30, 0x9F	; 159
 38a:	ff e0       	ldi	r31, 0x0F	; 15
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <Send_instruction+0x7c>
 390:	00 c0       	rjmp	.+0      	; 0x392 <Send_instruction+0x82>
 392:	00 00       	nop
 394:	08 95       	ret

00000396 <LCD_init>:
	

	void LCD_init(void)
	{
		/* Set The Control Pins Direction to OUtput */
		LCD_CONTROL_IO->ddr.allRegister |=(1<<E) | (1<<RW) | (1<<RS);
 396:	87 b3       	in	r24, 0x17	; 23
 398:	87 60       	ori	r24, 0x07	; 7
 39a:	87 bb       	out	0x17, r24	; 23
			LCD_CONTROL_IO->ddr.allRegister =0xFF;
		#else
			
			#if Upper_Data_port
				/* Set The Direction of The Upper Pins to OP*/
			LCD_Data_IO->ddr.allRegister |=(0xF0);
 39c:	87 b3       	in	r24, 0x17	; 23
 39e:	80 6f       	ori	r24, 0xF0	; 240
 3a0:	87 bb       	out	0x17, r24	; 23
			#else
				/* Set The Direction of The LOWER Pins to OP*/
			LCD_Data_IO->ddr.allRegister|=(0x0F);
			#endif
			Send_instruction(0x02);
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 88 01 	call	0x310	; 0x310 <Send_instruction>
		#endif
		
		Send_instruction(Data_Set);
 3a8:	88 e2       	ldi	r24, 0x28	; 40
 3aa:	0e 94 88 01 	call	0x310	; 0x310 <Send_instruction>
		Send_instruction(Display_on);
 3ae:	8c e0       	ldi	r24, 0x0C	; 12
 3b0:	0e 94 88 01 	call	0x310	; 0x310 <Send_instruction>
		Send_instruction(Clear_display);
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 88 01 	call	0x310	; 0x310 <Send_instruction>
 3ba:	08 95       	ret

000003bc <LCD_DisplayChar>:
	
	
	void LCD_DisplayChar(uint8_t Data)
	{
		/* RW  Should be 0  and RS should be 1 when Writing Data to LCD */
		SETBIT(LCD_CONTROL_IO->port.allRegister,RS);
 3bc:	c0 9a       	sbi	0x18, 0	; 24
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,RW);
 3be:	c1 98       	cbi	0x18, 1	; 24
 3c0:	ef e9       	ldi	r30, 0x9F	; 159
 3c2:	ff e0       	ldi	r31, 0x0F	; 15
 3c4:	31 97       	sbiw	r30, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_DisplayChar+0x8>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_DisplayChar+0xe>
 3ca:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		/* Enable LCD E=1 */
		SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 3cc:	c2 9a       	sbi	0x18, 2	; 24
 3ce:	ef e9       	ldi	r30, 0x9F	; 159
 3d0:	ff e0       	ldi	r31, 0x0F	; 15
 3d2:	31 97       	sbiw	r30, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <LCD_DisplayChar+0x16>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <LCD_DisplayChar+0x1c>
 3d8:	00 00       	nop
		#if eight_bitdata
			LCD_Data_IO->port.allRegister=Data;
		#else
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 3da:	98 b3       	in	r25, 0x18	; 24
 3dc:	9f 70       	andi	r25, 0x0F	; 15
 3de:	98 bb       	out	0x18, r25	; 24
				/* Send MSB (4-bits )*/
				LCD_Data_IO->port.allRegister |= (Data & 0xF0);
 3e0:	98 b3       	in	r25, 0x18	; 24
 3e2:	28 2f       	mov	r18, r24
 3e4:	20 7f       	andi	r18, 0xF0	; 240
 3e6:	92 2b       	or	r25, r18
 3e8:	98 bb       	out	0x18, r25	; 24
 3ea:	ef e9       	ldi	r30, 0x9F	; 159
 3ec:	ff e0       	ldi	r31, 0x0F	; 15
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <LCD_DisplayChar+0x32>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <LCD_DisplayChar+0x38>
 3f4:	00 00       	nop
			#endif
				
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
			/* disable LCD E=0 */
			CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 3f6:	c2 98       	cbi	0x18, 2	; 24
 3f8:	ef e9       	ldi	r30, 0x9F	; 159
 3fa:	ff e0       	ldi	r31, 0x0F	; 15
 3fc:	31 97       	sbiw	r30, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCD_DisplayChar+0x40>
 400:	00 c0       	rjmp	.+0      	; 0x402 <LCD_DisplayChar+0x46>
 402:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			/* Enable LCD E=1 */
			SETBIT(LCD_CONTROL_IO->port.allRegister,E);
 404:	c2 9a       	sbi	0x18, 2	; 24
				
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_IO->port.allRegister &=0x0F;
 406:	98 b3       	in	r25, 0x18	; 24
 408:	9f 70       	andi	r25, 0x0F	; 15
 40a:	98 bb       	out	0x18, r25	; 24
				LCD_Data_IO->port.allRegister |= ((Data <<4) & 0xF0);
 40c:	28 b3       	in	r18, 0x18	; 24
 40e:	f0 e1       	ldi	r31, 0x10	; 16
 410:	8f 9f       	mul	r24, r31
 412:	c0 01       	movw	r24, r0
 414:	11 24       	eor	r1, r1
 416:	82 2b       	or	r24, r18
 418:	88 bb       	out	0x18, r24	; 24
 41a:	8f e9       	ldi	r24, 0x9F	; 159
 41c:	9f e0       	ldi	r25, 0x0F	; 15
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <LCD_DisplayChar+0x62>
 422:	00 c0       	rjmp	.+0      	; 0x424 <LCD_DisplayChar+0x68>
 424:	00 00       	nop
 426:	ef e9       	ldi	r30, 0x9F	; 159
 428:	ff e0       	ldi	r31, 0x0F	; 15
 42a:	31 97       	sbiw	r30, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <LCD_DisplayChar+0x6e>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <LCD_DisplayChar+0x74>
 430:	00 00       	nop
			
			#endif
		/* Data set-up time delay  Tdsw = 195 ns */
		_delay_ms(1);
		/* disable LCD E=0 */
		CLEARBIT(LCD_CONTROL_IO->port.allRegister,E);
 432:	c2 98       	cbi	0x18, 2	; 24
 434:	8f e9       	ldi	r24, 0x9F	; 159
 436:	9f e0       	ldi	r25, 0x0F	; 15
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <LCD_DisplayChar+0x7c>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <LCD_DisplayChar+0x82>
 43e:	00 00       	nop
 440:	08 95       	ret

00000442 <LCD_DeleteChar>:
		
	}
	
	void LCD_DeleteChar(void)
	{
		Send_instruction(CURSOR_Shift_left);
 442:	80 e1       	ldi	r24, 0x10	; 16
 444:	0e 94 88 01 	call	0x310	; 0x310 <Send_instruction>
		LCD_DisplayChar(Space);
 448:	80 e2       	ldi	r24, 0x20	; 32
 44a:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_DisplayChar>
		Send_instruction(CURSOR_Shift_left);
 44e:	80 e1       	ldi	r24, 0x10	; 16
 450:	0e 94 88 01 	call	0x310	; 0x310 <Send_instruction>
 454:	08 95       	ret

00000456 <LCD_Clear>:
	
	
	void LCD_Clear(void)
	{
		/* Clear Screen */
		Send_instruction(Clear_display); 
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 88 01 	call	0x310	; 0x310 <Send_instruction>
 45c:	08 95       	ret

0000045e <LCD_DisplayString>:
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	ec 01       	movw	r28, r24
		while(*ptr != '\0')
 464:	88 81       	ld	r24, Y
 466:	88 23       	and	r24, r24
 468:	31 f0       	breq	.+12     	; 0x476 <LCD_DisplayString+0x18>
 46a:	21 96       	adiw	r28, 0x01	; 1
		{
			LCD_DisplayChar(*ptr);
 46c:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_DisplayChar>
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
		while(*ptr != '\0')
 470:	89 91       	ld	r24, Y+
 472:	81 11       	cpse	r24, r1
 474:	fb cf       	rjmp	.-10     	; 0x46c <LCD_DisplayString+0xe>
		{
			LCD_DisplayChar(*ptr);
			ptr++;
		}
	}
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <Relay_Control>:
	DIO_pinConfigure(Relay.Relay_Dio,Relay.Relay_Pin,OUTPUT);
	Relay_Control(Relay,RELAY_OFF);
}

void Relay_Control(RelayDataType Relay,RelayStates state)
{
 47c:	36 2f       	mov	r19, r22
	switch (state)
 47e:	44 23       	and	r20, r20
 480:	89 f0       	breq	.+34     	; 0x4a4 <Relay_Control+0x28>
 482:	41 30       	cpi	r20, 0x01	; 1
 484:	f1 f4       	brne	.+60     	; 0x4c2 <Relay_Control+0x46>
	{
		case RELAY_ON:
		if (Relay.RelayType == RELAY_ACTIVE_HIGH)
 486:	91 30       	cpi	r25, 0x01	; 1
 488:	31 f4       	brne	.+12     	; 0x496 <Relay_Control+0x1a>
		{
			DIO_pinWrite(Relay.Relay_Dio,Relay.Relay_Pin,HIGH);
 48a:	68 2f       	mov	r22, r24
 48c:	83 2f       	mov	r24, r19
 48e:	97 2f       	mov	r25, r23
 490:	0e 94 90 00 	call	0x120	; 0x120 <DIO_pinWrite>
 494:	08 95       	ret
		}
		else
		{
			DIO_pinWrite(Relay.Relay_Dio,Relay.Relay_Pin,LOW);
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	68 2f       	mov	r22, r24
 49a:	83 2f       	mov	r24, r19
 49c:	97 2f       	mov	r25, r23
 49e:	0e 94 90 00 	call	0x120	; 0x120 <DIO_pinWrite>
 4a2:	08 95       	ret
		}
		break;
		case RELAY_OFF:
		if (Relay.RelayType == RELAY_ACTIVE_HIGH)
 4a4:	91 30       	cpi	r25, 0x01	; 1
 4a6:	39 f4       	brne	.+14     	; 0x4b6 <Relay_Control+0x3a>
		{
			DIO_pinWrite(Relay.Relay_Dio,Relay.Relay_Pin,LOW);
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	68 2f       	mov	r22, r24
 4ac:	83 2f       	mov	r24, r19
 4ae:	97 2f       	mov	r25, r23
 4b0:	0e 94 90 00 	call	0x120	; 0x120 <DIO_pinWrite>
 4b4:	08 95       	ret
		}
		else
		{
			DIO_pinWrite(Relay.Relay_Dio,Relay.Relay_Pin,HIGH);
 4b6:	41 e0       	ldi	r20, 0x01	; 1
 4b8:	68 2f       	mov	r22, r24
 4ba:	83 2f       	mov	r24, r19
 4bc:	97 2f       	mov	r25, r23
 4be:	0e 94 90 00 	call	0x120	; 0x120 <DIO_pinWrite>
 4c2:	08 95       	ret

000004c4 <Relay_Setup>:

#include "relay.h"


void Relay_Setup(RelayDataType Relay)
{
 4c4:	0f 93       	push	r16
 4c6:	1f 93       	push	r17
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	16 2f       	mov	r17, r22
 4ce:	d7 2f       	mov	r29, r23
 4d0:	c8 2f       	mov	r28, r24
 4d2:	09 2f       	mov	r16, r25
	DIO_pinConfigure(Relay.Relay_Dio,Relay.Relay_Pin,OUTPUT);
 4d4:	42 e0       	ldi	r20, 0x02	; 2
 4d6:	68 2f       	mov	r22, r24
 4d8:	81 2f       	mov	r24, r17
 4da:	97 2f       	mov	r25, r23
 4dc:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_pinConfigure>
	Relay_Control(Relay,RELAY_OFF);
 4e0:	40 e0       	ldi	r20, 0x00	; 0
 4e2:	61 2f       	mov	r22, r17
 4e4:	7d 2f       	mov	r23, r29
 4e6:	8c 2f       	mov	r24, r28
 4e8:	90 2f       	mov	r25, r16
 4ea:	0e 94 3e 02 	call	0x47c	; 0x47c <Relay_Control>
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	08 95       	ret

000004f8 <compareArray>:

uint8_t compareArray(uint8_t a[] , uint8_t b[] , uint8_t size)
{
	uint8_t i;
	uint8_t comparasion = NotMatched;
	for(i=0;i<size;i++)
 4f8:	44 23       	and	r20, r20
 4fa:	81 f0       	breq	.+32     	; 0x51c <compareArray+0x24>
 4fc:	26 2f       	mov	r18, r22
 4fe:	a8 2f       	mov	r26, r24
 500:	b9 2f       	mov	r27, r25
 502:	e6 2f       	mov	r30, r22
 504:	f7 2f       	mov	r31, r23
}

uint8_t compareArray(uint8_t a[] , uint8_t b[] , uint8_t size)
{
	uint8_t i;
	uint8_t comparasion = NotMatched;
 506:	80 e0       	ldi	r24, 0x00	; 0
	for(i=0;i<size;i++)
	{
		if((a[i] = b[i]))
		{
			comparasion = Matched;
 508:	31 e0       	ldi	r19, 0x01	; 1
{
	uint8_t i;
	uint8_t comparasion = NotMatched;
	for(i=0;i<size;i++)
	{
		if((a[i] = b[i]))
 50a:	91 91       	ld	r25, Z+
 50c:	9d 93       	st	X+, r25
 50e:	91 11       	cpse	r25, r1
		{
			comparasion = Matched;
 510:	83 2f       	mov	r24, r19
 512:	9e 2f       	mov	r25, r30
 514:	92 1b       	sub	r25, r18

uint8_t compareArray(uint8_t a[] , uint8_t b[] , uint8_t size)
{
	uint8_t i;
	uint8_t comparasion = NotMatched;
	for(i=0;i<size;i++)
 516:	94 17       	cp	r25, r20
 518:	c0 f3       	brcs	.-16     	; 0x50a <compareArray+0x12>
 51a:	08 95       	ret
}

uint8_t compareArray(uint8_t a[] , uint8_t b[] , uint8_t size)
{
	uint8_t i;
	uint8_t comparasion = NotMatched;
 51c:	80 e0       	ldi	r24, 0x00	; 0
		{
			comparasion = Matched;
		}
	}
	return comparasion;
}
 51e:	08 95       	ret

00000520 <Enter_password>:

uint8_t Enter_password(uint8_t * passcode)
{
 520:	0f 93       	push	r16
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	ec 01       	movw	r28, r24
	uint8_t Ok;
	uint8_t i =0;
 52a:	10 e0       	ldi	r17, 0x00	; 0
	/*6 digit password plus OK button*/
	while (i < 7)
	{
		uint8_t keypad_button =Keypad_pressed_key(KEYPAD_DIO);
 52c:	89 e3       	ldi	r24, 0x39	; 57
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 15 01 	call	0x22a	; 0x22a <Keypad_pressed_key>
 534:	08 2f       	mov	r16, r24
		if ((i == 0) && (keypad_button != KEY_NOT_PRESSED) )
 536:	11 11       	cpse	r17, r1
 538:	05 c0       	rjmp	.+10     	; 0x544 <Enter_password+0x24>
 53a:	8a 30       	cpi	r24, 0x0A	; 10
 53c:	09 f4       	brne	.+2      	; 0x540 <Enter_password+0x20>
 53e:	ab c0       	rjmp	.+342    	; 0x696 <Enter_password+0x176>
		{
			LCD_Clear();
 540:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
		}
		
		switch (keypad_button)
 544:	40 2f       	mov	r20, r16
 546:	50 e0       	ldi	r21, 0x00	; 0
 548:	fa 01       	movw	r30, r20
 54a:	b3 97       	sbiw	r30, 0x23	; 35
 54c:	e7 31       	cpi	r30, 0x17	; 23
 54e:	f1 05       	cpc	r31, r1
 550:	08 f0       	brcs	.+2      	; 0x554 <Enter_password+0x34>
 552:	8a c0       	rjmp	.+276    	; 0x668 <Enter_password+0x148>
 554:	e6 5d       	subi	r30, 0xD6	; 214
 556:	ff 4f       	sbci	r31, 0xFF	; 255
 558:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__tablejump2__>
		{
			case '0':
				if (i!=6)
 55c:	16 30       	cpi	r17, 0x06	; 6
 55e:	09 f4       	brne	.+2      	; 0x562 <Enter_password+0x42>
 560:	90 c0       	rjmp	.+288    	; 0x682 <Enter_password+0x162>
				{
					LCD_DisplayChar('0');
 562:	80 e3       	ldi	r24, 0x30	; 48
 564:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_DisplayChar>
					passcode [i]='0';
 568:	fe 01       	movw	r30, r28
 56a:	e1 0f       	add	r30, r17
 56c:	f1 1d       	adc	r31, r1
 56e:	80 e3       	ldi	r24, 0x30	; 48
 570:	80 83       	st	Z, r24
					i++;
 572:	1f 5f       	subi	r17, 0xFF	; 255
 574:	79 c0       	rjmp	.+242    	; 0x668 <Enter_password+0x148>
			    }
			break;
			case '1':
			if (i!=6){
 576:	16 30       	cpi	r17, 0x06	; 6
 578:	09 f4       	brne	.+2      	; 0x57c <Enter_password+0x5c>
 57a:	83 c0       	rjmp	.+262    	; 0x682 <Enter_password+0x162>
				LCD_DisplayChar('1');
 57c:	81 e3       	ldi	r24, 0x31	; 49
 57e:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_DisplayChar>
				passcode [i]='1';
 582:	fe 01       	movw	r30, r28
 584:	e1 0f       	add	r30, r17
 586:	f1 1d       	adc	r31, r1
 588:	81 e3       	ldi	r24, 0x31	; 49
 58a:	80 83       	st	Z, r24
				i++;
 58c:	1f 5f       	subi	r17, 0xFF	; 255
 58e:	6c c0       	rjmp	.+216    	; 0x668 <Enter_password+0x148>
			}
			break;
			case '2':
			if (i!=6){
 590:	16 30       	cpi	r17, 0x06	; 6
 592:	09 f4       	brne	.+2      	; 0x596 <Enter_password+0x76>
 594:	76 c0       	rjmp	.+236    	; 0x682 <Enter_password+0x162>
				LCD_DisplayChar('2');
 596:	82 e3       	ldi	r24, 0x32	; 50
 598:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_DisplayChar>
				passcode [i]='2';
 59c:	fe 01       	movw	r30, r28
 59e:	e1 0f       	add	r30, r17
 5a0:	f1 1d       	adc	r31, r1
 5a2:	82 e3       	ldi	r24, 0x32	; 50
 5a4:	80 83       	st	Z, r24
				i++;
 5a6:	1f 5f       	subi	r17, 0xFF	; 255
 5a8:	5f c0       	rjmp	.+190    	; 0x668 <Enter_password+0x148>
			}
			break;
			case '3':
			if (i!=6){
 5aa:	16 30       	cpi	r17, 0x06	; 6
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <Enter_password+0x90>
 5ae:	69 c0       	rjmp	.+210    	; 0x682 <Enter_password+0x162>
				LCD_DisplayChar('3');
 5b0:	83 e3       	ldi	r24, 0x33	; 51
 5b2:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_DisplayChar>
				passcode [i]='3';
 5b6:	fe 01       	movw	r30, r28
 5b8:	e1 0f       	add	r30, r17
 5ba:	f1 1d       	adc	r31, r1
 5bc:	83 e3       	ldi	r24, 0x33	; 51
 5be:	80 83       	st	Z, r24
				i++;
 5c0:	1f 5f       	subi	r17, 0xFF	; 255
 5c2:	52 c0       	rjmp	.+164    	; 0x668 <Enter_password+0x148>
			}
			break;
			case '4':
			if (i!=6){
 5c4:	16 30       	cpi	r17, 0x06	; 6
 5c6:	09 f4       	brne	.+2      	; 0x5ca <Enter_password+0xaa>
 5c8:	5c c0       	rjmp	.+184    	; 0x682 <Enter_password+0x162>
				LCD_DisplayChar('4');
 5ca:	84 e3       	ldi	r24, 0x34	; 52
 5cc:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_DisplayChar>
				passcode [i]='4';
 5d0:	fe 01       	movw	r30, r28
 5d2:	e1 0f       	add	r30, r17
 5d4:	f1 1d       	adc	r31, r1
 5d6:	84 e3       	ldi	r24, 0x34	; 52
 5d8:	80 83       	st	Z, r24
				i++;
 5da:	1f 5f       	subi	r17, 0xFF	; 255
 5dc:	45 c0       	rjmp	.+138    	; 0x668 <Enter_password+0x148>
			}
			break;
			case '5':
			if (i!=6){
 5de:	16 30       	cpi	r17, 0x06	; 6
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <Enter_password+0xc4>
 5e2:	4f c0       	rjmp	.+158    	; 0x682 <Enter_password+0x162>
				LCD_DisplayChar('5');
 5e4:	85 e3       	ldi	r24, 0x35	; 53
 5e6:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_DisplayChar>
				passcode [i]='5';
 5ea:	fe 01       	movw	r30, r28
 5ec:	e1 0f       	add	r30, r17
 5ee:	f1 1d       	adc	r31, r1
 5f0:	85 e3       	ldi	r24, 0x35	; 53
 5f2:	80 83       	st	Z, r24
				i++;
 5f4:	1f 5f       	subi	r17, 0xFF	; 255
 5f6:	38 c0       	rjmp	.+112    	; 0x668 <Enter_password+0x148>
			}
			break;
			case '6':
			if (i!=6){
 5f8:	16 30       	cpi	r17, 0x06	; 6
 5fa:	09 f4       	brne	.+2      	; 0x5fe <Enter_password+0xde>
 5fc:	42 c0       	rjmp	.+132    	; 0x682 <Enter_password+0x162>
				LCD_DisplayChar('6');
 5fe:	86 e3       	ldi	r24, 0x36	; 54
 600:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_DisplayChar>
				passcode [i]='6';
 604:	fe 01       	movw	r30, r28
 606:	e1 0f       	add	r30, r17
 608:	f1 1d       	adc	r31, r1
 60a:	86 e3       	ldi	r24, 0x36	; 54
 60c:	80 83       	st	Z, r24
				i++;
 60e:	1f 5f       	subi	r17, 0xFF	; 255
 610:	2b c0       	rjmp	.+86     	; 0x668 <Enter_password+0x148>
			}
			break;
			case '7':
			if (i!=6){
 612:	16 30       	cpi	r17, 0x06	; 6
 614:	b1 f1       	breq	.+108    	; 0x682 <Enter_password+0x162>
				LCD_DisplayChar('7');
 616:	87 e3       	ldi	r24, 0x37	; 55
 618:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_DisplayChar>
				passcode [i]='7';
 61c:	fe 01       	movw	r30, r28
 61e:	e1 0f       	add	r30, r17
 620:	f1 1d       	adc	r31, r1
 622:	87 e3       	ldi	r24, 0x37	; 55
 624:	80 83       	st	Z, r24
				i++;
 626:	1f 5f       	subi	r17, 0xFF	; 255
 628:	1f c0       	rjmp	.+62     	; 0x668 <Enter_password+0x148>
			}
			break;
			case '8':
			if (i!=6){
 62a:	16 30       	cpi	r17, 0x06	; 6
 62c:	51 f1       	breq	.+84     	; 0x682 <Enter_password+0x162>
				LCD_DisplayChar('8');
 62e:	88 e3       	ldi	r24, 0x38	; 56
 630:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_DisplayChar>
				passcode [i]='8';
 634:	fe 01       	movw	r30, r28
 636:	e1 0f       	add	r30, r17
 638:	f1 1d       	adc	r31, r1
 63a:	88 e3       	ldi	r24, 0x38	; 56
 63c:	80 83       	st	Z, r24
				i++;
 63e:	1f 5f       	subi	r17, 0xFF	; 255
 640:	13 c0       	rjmp	.+38     	; 0x668 <Enter_password+0x148>
			}
			break;
			case '9':
			if (i!=6){
 642:	16 30       	cpi	r17, 0x06	; 6
 644:	f1 f0       	breq	.+60     	; 0x682 <Enter_password+0x162>
				LCD_DisplayChar('9');
 646:	89 e3       	ldi	r24, 0x39	; 57
 648:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_DisplayChar>
				passcode [i]='9';
 64c:	fe 01       	movw	r30, r28
 64e:	e1 0f       	add	r30, r17
 650:	f1 1d       	adc	r31, r1
 652:	89 e3       	ldi	r24, 0x39	; 57
 654:	80 83       	st	Z, r24
				i++;
 656:	1f 5f       	subi	r17, 0xFF	; 255
 658:	07 c0       	rjmp	.+14     	; 0x668 <Enter_password+0x148>
			}
			break;
			case '#':
			if (i!=6){
 65a:	16 30       	cpi	r17, 0x06	; 6
 65c:	91 f0       	breq	.+36     	; 0x682 <Enter_password+0x162>
				LCD_DeleteChar();
 65e:	0e 94 21 02 	call	0x442	; 0x442 <LCD_DeleteChar>
				i--;
 662:	11 50       	subi	r17, 0x01	; 1
 664:	01 c0       	rjmp	.+2      	; 0x668 <Enter_password+0x148>
			case '*' :
			if (i==6)
			{
				Ok='*';
			}
			i++;
 666:	1f 5f       	subi	r17, 0xFF	; 255
 668:	2f ef       	ldi	r18, 0xFF	; 255
 66a:	8b ed       	ldi	r24, 0xDB	; 219
 66c:	95 e0       	ldi	r25, 0x05	; 5
 66e:	21 50       	subi	r18, 0x01	; 1
 670:	80 40       	sbci	r24, 0x00	; 0
 672:	90 40       	sbci	r25, 0x00	; 0
 674:	e1 f7       	brne	.-8      	; 0x66e <Enter_password+0x14e>
 676:	00 c0       	rjmp	.+0      	; 0x678 <Enter_password+0x158>
 678:	00 00       	nop
uint8_t Enter_password(uint8_t * passcode)
{
	uint8_t Ok;
	uint8_t i =0;
	/*6 digit password plus OK button*/
	while (i < 7)
 67a:	17 30       	cpi	r17, 0x07	; 7
 67c:	08 f4       	brcc	.+2      	; 0x680 <Enter_password+0x160>
 67e:	56 cf       	rjmp	.-340    	; 0x52c <Enter_password+0xc>
 680:	14 c0       	rjmp	.+40     	; 0x6aa <Enter_password+0x18a>
 682:	2f ef       	ldi	r18, 0xFF	; 255
 684:	8b ed       	ldi	r24, 0xDB	; 219
 686:	95 e0       	ldi	r25, 0x05	; 5
 688:	21 50       	subi	r18, 0x01	; 1
 68a:	80 40       	sbci	r24, 0x00	; 0
 68c:	90 40       	sbci	r25, 0x00	; 0
 68e:	e1 f7       	brne	.-8      	; 0x688 <Enter_password+0x168>
 690:	00 c0       	rjmp	.+0      	; 0x692 <Enter_password+0x172>
 692:	00 00       	nop
 694:	4b cf       	rjmp	.-362    	; 0x52c <Enter_password+0xc>
 696:	2f ef       	ldi	r18, 0xFF	; 255
 698:	8b ed       	ldi	r24, 0xDB	; 219
 69a:	95 e0       	ldi	r25, 0x05	; 5
 69c:	21 50       	subi	r18, 0x01	; 1
 69e:	80 40       	sbci	r24, 0x00	; 0
 6a0:	90 40       	sbci	r25, 0x00	; 0
 6a2:	e1 f7       	brne	.-8      	; 0x69c <Enter_password+0x17c>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <Enter_password+0x186>
 6a6:	00 00       	nop
 6a8:	41 cf       	rjmp	.-382    	; 0x52c <Enter_password+0xc>
		_delay_ms(120);
	}
	
	
	return Ok;
}
 6aa:	8a e2       	ldi	r24, 0x2A	; 42
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	1f 91       	pop	r17
 6b2:	0f 91       	pop	r16
 6b4:	08 95       	ret

000006b6 <Match_Password>:

void Match_Password (uint8_t *passcode , UserPacket *ALLPasswords , RelayDataType Relay ,  uint8_t *internet_state)
{
 6b6:	af 92       	push	r10
 6b8:	bf 92       	push	r11
 6ba:	cf 92       	push	r12
 6bc:	df 92       	push	r13
 6be:	ef 92       	push	r14
 6c0:	ff 92       	push	r15
 6c2:	0f 93       	push	r16
 6c4:	1f 93       	push	r17
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	5c 01       	movw	r10, r24
 6cc:	eb 01       	movw	r28, r22
 6ce:	69 01       	movw	r12, r18
 6d0:	7a 01       	movw	r14, r20
	
	if (compareArray(passcode , ALLPasswords[TEMPORARY_PASSWORD].Password , PASSWORD_LENGTH) && 
 6d2:	46 e0       	ldi	r20, 0x06	; 6
 6d4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <compareArray>
 6d8:	88 23       	and	r24, r24
 6da:	49 f1       	breq	.+82     	; 0x72e <Match_Password+0x78>
 6dc:	8a 89       	ldd	r24, Y+18	; 0x12
 6de:	82 33       	cpi	r24, 0x32	; 50
 6e0:	31 f1       	breq	.+76     	; 0x72e <Match_Password+0x78>
	    ALLPasswords[TEMPORARY_PASSWORD].AccessTime!=NO_ACCESS_TIME)
	{
		//send USERNAME
		LCD_Clear();
 6e2:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
		LCD_DisplayString("AcceptedPassword");
 6e6:	82 ef       	ldi	r24, 0xF2	; 242
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_DisplayString>
 6ee:	2f ef       	ldi	r18, 0xFF	; 255
 6f0:	87 ea       	ldi	r24, 0xA7	; 167
 6f2:	91 e6       	ldi	r25, 0x61	; 97
 6f4:	21 50       	subi	r18, 0x01	; 1
 6f6:	80 40       	sbci	r24, 0x00	; 0
 6f8:	90 40       	sbci	r25, 0x00	; 0
 6fa:	e1 f7       	brne	.-8      	; 0x6f4 <Match_Password+0x3e>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <Match_Password+0x48>
 6fe:	00 00       	nop
		_delay_ms(2000);
		//LCD_Clear();
		//LCD_DisplayString(ALLPasswords[TEMPORARY_PASSWORD].UserName);
		Relay_Control(Relay , RELAY_ON);
 700:	41 e0       	ldi	r20, 0x01	; 1
 702:	c7 01       	movw	r24, r14
 704:	b6 01       	movw	r22, r12
 706:	0e 94 3e 02 	call	0x47c	; 0x47c <Relay_Control>
		if ((*internet_state) =='1')
 70a:	f8 01       	movw	r30, r16
 70c:	80 81       	ld	r24, Z
 70e:	81 33       	cpi	r24, 0x31	; 49
 710:	39 f4       	brne	.+14     	; 0x720 <Match_Password+0x6a>
		{
			LCD_Clear();
 712:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
			LCD_DisplayString("No Internet");
 716:	83 e0       	ldi	r24, 0x03	; 3
 718:	91 e0       	ldi	r25, 0x01	; 1
 71a:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_DisplayString>
 71e:	04 c0       	rjmp	.+8      	; 0x728 <Match_Password+0x72>
			//gsm send message
		}
		else
		{
			UART_Send_string(ALLPasswords[TEMPORARY_PASSWORD].UserName);
 720:	ce 01       	movw	r24, r28
 722:	43 96       	adiw	r24, 0x13	; 19
 724:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Send_string>
		}
		ALLPasswords[TEMPORARY_PASSWORD].AccessTime=NO_ACCESS_TIME;
 728:	82 e3       	ldi	r24, 0x32	; 50
 72a:	8a 8b       	std	Y+18, r24	; 0x12
 72c:	d5 c0       	rjmp	.+426    	; 0x8d8 <__stack+0x79>
		

	}
	else
	{
		if (compareArray(passcode , ALLPasswords[PASSWORD_ONE].Password,PASSWORD_LENGTH))
 72e:	46 e0       	ldi	r20, 0x06	; 6
 730:	be 01       	movw	r22, r28
 732:	6e 5d       	subi	r22, 0xDE	; 222
 734:	7f 4f       	sbci	r23, 0xFF	; 255
 736:	c5 01       	movw	r24, r10
 738:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <compareArray>
 73c:	88 23       	and	r24, r24
 73e:	01 f1       	breq	.+64     	; 0x780 <Match_Password+0xca>
		{
			LCD_Clear();
 740:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
			
			LCD_DisplayString("AcceptedPassword");
 744:	82 ef       	ldi	r24, 0xF2	; 242
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_DisplayString>
			Relay_Control(Relay , RELAY_ON);
 74c:	41 e0       	ldi	r20, 0x01	; 1
 74e:	c7 01       	movw	r24, r14
 750:	b6 01       	movw	r22, r12
 752:	0e 94 3e 02 	call	0x47c	; 0x47c <Relay_Control>
 756:	ff ef       	ldi	r31, 0xFF	; 255
 758:	27 ea       	ldi	r18, 0xA7	; 167
 75a:	81 e6       	ldi	r24, 0x61	; 97
 75c:	f1 50       	subi	r31, 0x01	; 1
 75e:	20 40       	sbci	r18, 0x00	; 0
 760:	80 40       	sbci	r24, 0x00	; 0
 762:	e1 f7       	brne	.-8      	; 0x75c <Match_Password+0xa6>
 764:	00 c0       	rjmp	.+0      	; 0x766 <Match_Password+0xb0>
 766:	00 00       	nop
			_delay_ms(2000);
			LCD_Clear();
 768:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
			if (*internet_state ==1)
 76c:	f8 01       	movw	r30, r16
 76e:	80 81       	ld	r24, Z
 770:	81 30       	cpi	r24, 0x01	; 1
 772:	09 f4       	brne	.+2      	; 0x776 <Match_Password+0xc0>
 774:	b1 c0       	rjmp	.+354    	; 0x8d8 <__stack+0x79>
			{
				//gsm send message
			}
			else
			{
				UART_Send_string(ALLPasswords[PASSWORD_ONE].UserName);
 776:	ce 01       	movw	r24, r28
 778:	c5 96       	adiw	r24, 0x35	; 53
 77a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Send_string>
 77e:	ac c0       	rjmp	.+344    	; 0x8d8 <__stack+0x79>
			

		}
		else
		{
			if (compareArray(passcode , ALLPasswords[PASSWORD_TWO].Password,PASSWORD_LENGTH))
 780:	46 e0       	ldi	r20, 0x06	; 6
 782:	be 01       	movw	r22, r28
 784:	6c 5b       	subi	r22, 0xBC	; 188
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	c5 01       	movw	r24, r10
 78a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <compareArray>
 78e:	88 23       	and	r24, r24
 790:	09 f1       	breq	.+66     	; 0x7d4 <Match_Password+0x11e>
			{
				LCD_Clear();
 792:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
				LCD_DisplayString("AcceptedPassword");
 796:	82 ef       	ldi	r24, 0xF2	; 242
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_DisplayString>
				Relay_Control(Relay , RELAY_ON);
 79e:	41 e0       	ldi	r20, 0x01	; 1
 7a0:	c7 01       	movw	r24, r14
 7a2:	b6 01       	movw	r22, r12
 7a4:	0e 94 3e 02 	call	0x47c	; 0x47c <Relay_Control>
 7a8:	ff ef       	ldi	r31, 0xFF	; 255
 7aa:	27 ea       	ldi	r18, 0xA7	; 167
 7ac:	81 e6       	ldi	r24, 0x61	; 97
 7ae:	f1 50       	subi	r31, 0x01	; 1
 7b0:	20 40       	sbci	r18, 0x00	; 0
 7b2:	80 40       	sbci	r24, 0x00	; 0
 7b4:	e1 f7       	brne	.-8      	; 0x7ae <Match_Password+0xf8>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <Match_Password+0x102>
 7b8:	00 00       	nop
				_delay_ms(2000);
				LCD_Clear();
 7ba:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
				//LCD_DisplayString(ALLPasswords[PASSWORD_TWO].UserName);
				
				if (*internet_state ==1)
 7be:	f8 01       	movw	r30, r16
 7c0:	80 81       	ld	r24, Z
 7c2:	81 30       	cpi	r24, 0x01	; 1
 7c4:	09 f4       	brne	.+2      	; 0x7c8 <Match_Password+0x112>
 7c6:	88 c0       	rjmp	.+272    	; 0x8d8 <__stack+0x79>
				{
					//gsm send
				}
				else
				{
					UART_Send_string(ALLPasswords[PASSWORD_TWO].UserName);
 7c8:	ce 01       	movw	r24, r28
 7ca:	89 5a       	subi	r24, 0xA9	; 169
 7cc:	9f 4f       	sbci	r25, 0xFF	; 255
 7ce:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Send_string>
 7d2:	82 c0       	rjmp	.+260    	; 0x8d8 <__stack+0x79>
				}

			}
			else
			{
				if (compareArray(passcode , ALLPasswords[PASSWORD_THREE].Password,PASSWORD_LENGTH))
 7d4:	46 e0       	ldi	r20, 0x06	; 6
 7d6:	be 01       	movw	r22, r28
 7d8:	6a 59       	subi	r22, 0x9A	; 154
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	c5 01       	movw	r24, r10
 7de:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <compareArray>
 7e2:	88 23       	and	r24, r24
 7e4:	09 f1       	breq	.+66     	; 0x828 <Match_Password+0x172>
				{
					LCD_Clear();
 7e6:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
					LCD_DisplayString("AcceptedPassword");
 7ea:	82 ef       	ldi	r24, 0xF2	; 242
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_DisplayString>
					Relay_Control(Relay , RELAY_ON);
 7f2:	41 e0       	ldi	r20, 0x01	; 1
 7f4:	c7 01       	movw	r24, r14
 7f6:	b6 01       	movw	r22, r12
 7f8:	0e 94 3e 02 	call	0x47c	; 0x47c <Relay_Control>
 7fc:	ff ef       	ldi	r31, 0xFF	; 255
 7fe:	27 ea       	ldi	r18, 0xA7	; 167
 800:	81 e6       	ldi	r24, 0x61	; 97
 802:	f1 50       	subi	r31, 0x01	; 1
 804:	20 40       	sbci	r18, 0x00	; 0
 806:	80 40       	sbci	r24, 0x00	; 0
 808:	e1 f7       	brne	.-8      	; 0x802 <Match_Password+0x14c>
 80a:	00 c0       	rjmp	.+0      	; 0x80c <Match_Password+0x156>
 80c:	00 00       	nop
					_delay_ms(2000);
					LCD_Clear();
 80e:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
					//LCD_DisplayString(ALLPasswords[PASSWORD_THREE].UserName);
					if (*internet_state ==1)
 812:	f8 01       	movw	r30, r16
 814:	80 81       	ld	r24, Z
 816:	81 30       	cpi	r24, 0x01	; 1
 818:	09 f4       	brne	.+2      	; 0x81c <Match_Password+0x166>
 81a:	5e c0       	rjmp	.+188    	; 0x8d8 <__stack+0x79>
					{
						//gsm send
					}
					else
					{
						UART_Send_string(ALLPasswords[PASSWORD_THREE].UserName);
 81c:	ce 01       	movw	r24, r28
 81e:	87 58       	subi	r24, 0x87	; 135
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Send_string>
 826:	58 c0       	rjmp	.+176    	; 0x8d8 <__stack+0x79>
					}
				}
				else
				{
					if (compareArray(passcode , ALLPasswords[PASSWORD_FOUR].Password,PASSWORD_LENGTH))
 828:	46 e0       	ldi	r20, 0x06	; 6
 82a:	be 01       	movw	r22, r28
 82c:	68 57       	subi	r22, 0x78	; 120
 82e:	7f 4f       	sbci	r23, 0xFF	; 255
 830:	c5 01       	movw	r24, r10
 832:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <compareArray>
 836:	88 23       	and	r24, r24
 838:	01 f1       	breq	.+64     	; 0x87a <__stack+0x1b>
					{
						LCD_Clear();
 83a:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
						LCD_DisplayString("AcceptedPassword");
 83e:	82 ef       	ldi	r24, 0xF2	; 242
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_DisplayString>
						Relay_Control(Relay , RELAY_ON);
 846:	41 e0       	ldi	r20, 0x01	; 1
 848:	c7 01       	movw	r24, r14
 84a:	b6 01       	movw	r22, r12
 84c:	0e 94 3e 02 	call	0x47c	; 0x47c <Relay_Control>
 850:	ff ef       	ldi	r31, 0xFF	; 255
 852:	27 ea       	ldi	r18, 0xA7	; 167
 854:	81 e6       	ldi	r24, 0x61	; 97
 856:	f1 50       	subi	r31, 0x01	; 1
 858:	20 40       	sbci	r18, 0x00	; 0
 85a:	80 40       	sbci	r24, 0x00	; 0
 85c:	e1 f7       	brne	.-8      	; 0x856 <Match_Password+0x1a0>
 85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
 860:	00 00       	nop
						_delay_ms(2000);
						LCD_Clear();
 862:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
						//LCD_DisplayString(ALLPasswords[PASSWORD_FOUR].UserName);
						if (*internet_state ==1)
 866:	f8 01       	movw	r30, r16
 868:	80 81       	ld	r24, Z
 86a:	81 30       	cpi	r24, 0x01	; 1
 86c:	a9 f1       	breq	.+106    	; 0x8d8 <__stack+0x79>
						{
							//gsm send
						}
						else
						{
							UART_Send_string(ALLPasswords[PASSWORD_FOUR].UserName);
 86e:	ce 01       	movw	r24, r28
 870:	85 56       	subi	r24, 0x65	; 101
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Send_string>
 878:	2f c0       	rjmp	.+94     	; 0x8d8 <__stack+0x79>
						}

					}
					else
					{
						if (compareArray(passcode , ALLPasswords[PASSWORD_FIVE].Password,PASSWORD_LENGTH))
 87a:	46 e0       	ldi	r20, 0x06	; 6
 87c:	be 01       	movw	r22, r28
 87e:	66 55       	subi	r22, 0x56	; 86
 880:	7f 4f       	sbci	r23, 0xFF	; 255
 882:	c5 01       	movw	r24, r10
 884:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <compareArray>
 888:	88 23       	and	r24, r24
 88a:	01 f1       	breq	.+64     	; 0x8cc <__stack+0x6d>
						{
							LCD_Clear();
 88c:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
							
							LCD_DisplayString("AcceptedPassword");
 890:	82 ef       	ldi	r24, 0xF2	; 242
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_DisplayString>
							Relay_Control(Relay , RELAY_ON);
 898:	41 e0       	ldi	r20, 0x01	; 1
 89a:	c7 01       	movw	r24, r14
 89c:	b6 01       	movw	r22, r12
 89e:	0e 94 3e 02 	call	0x47c	; 0x47c <Relay_Control>
 8a2:	ff ef       	ldi	r31, 0xFF	; 255
 8a4:	27 ea       	ldi	r18, 0xA7	; 167
 8a6:	81 e6       	ldi	r24, 0x61	; 97
 8a8:	f1 50       	subi	r31, 0x01	; 1
 8aa:	20 40       	sbci	r18, 0x00	; 0
 8ac:	80 40       	sbci	r24, 0x00	; 0
 8ae:	e1 f7       	brne	.-8      	; 0x8a8 <__stack+0x49>
 8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <__stack+0x53>
 8b2:	00 00       	nop
							_delay_ms(2000);
							LCD_Clear();
 8b4:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
					
							//LCD_DisplayString(ALLPasswords[PASSWORD_FIVE].UserName);
							if (*internet_state ==1)
 8b8:	f8 01       	movw	r30, r16
 8ba:	80 81       	ld	r24, Z
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	61 f0       	breq	.+24     	; 0x8d8 <__stack+0x79>
							{
								//gsm send
							}
							else
							{
								UART_Send_string(ALLPasswords[PASSWORD_FIVE].UserName);
 8c0:	ce 01       	movw	r24, r28
 8c2:	83 54       	subi	r24, 0x43	; 67
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Send_string>
 8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <__stack+0x79>

						}
						else
						
						{
							LCD_Clear();
 8cc:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_Clear>
							LCD_DisplayString("Wrong Password");
 8d0:	8f e0       	ldi	r24, 0x0F	; 15
 8d2:	91 e0       	ldi	r25, 0x01	; 1
 8d4:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_DisplayString>

				}
			}
		}
	}
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	1f 91       	pop	r17
 8de:	0f 91       	pop	r16
 8e0:	ff 90       	pop	r15
 8e2:	ef 90       	pop	r14
 8e4:	df 90       	pop	r13
 8e6:	cf 90       	pop	r12
 8e8:	bf 90       	pop	r11
 8ea:	af 90       	pop	r10
 8ec:	08 95       	ret

000008ee <main>:
#include "Passcode.h"
#include "relay.h"
#include <util/delay.h>

int main(void)
{
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	cd b7       	in	r28, 0x3d	; 61
 8f4:	de b7       	in	r29, 0x3e	; 62
 8f6:	c3 5d       	subi	r28, 0xD3	; 211
 8f8:	d1 09       	sbc	r29, r1
 8fa:	0f b6       	in	r0, 0x3f	; 63
 8fc:	f8 94       	cli
 8fe:	de bf       	out	0x3e, r29	; 62
 900:	0f be       	out	0x3f, r0	; 63
 902:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
 904:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_init>
	keypad_setup(KEYPAD_DIO);
 908:	89 e3       	ldi	r24, 0x39	; 57
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <keypad_setup>
	
	RelayDataType relay ={DIOB , PIN0 ,RELAY_ACTIVE_HIGH};
 910:	0f 2e       	mov	r0, r31
 912:	f6 e3       	ldi	r31, 0x36	; 54
 914:	cf 2e       	mov	r12, r31
 916:	f0 2d       	mov	r31, r0
 918:	d1 2c       	mov	r13, r1
 91a:	e1 2c       	mov	r14, r1
 91c:	ff 24       	eor	r15, r15
 91e:	f3 94       	inc	r15
	Relay_Setup(relay);
 920:	66 e3       	ldi	r22, 0x36	; 54
 922:	70 e0       	ldi	r23, 0x00	; 0
 924:	80 e0       	ldi	r24, 0x00	; 0
 926:	91 e0       	ldi	r25, 0x01	; 1
 928:	0e 94 62 02 	call	0x4c4	; 0x4c4 <Relay_Setup>
	uint8_t Internet_State;
	uint8_t *Internet_State_Ptr=&Internet_State;

    /* Test */
	UserPacket AllPasswords[6]=
 92c:	de 01       	movw	r26, r28
 92e:	12 96       	adiw	r26, 0x02	; 2
 930:	8c ec       	ldi	r24, 0xCC	; 204
 932:	fd 01       	movw	r30, r26
 934:	11 92       	st	Z+, r1
 936:	8a 95       	dec	r24
 938:	e9 f7       	brne	.-6      	; 0x934 <main+0x46>
 93a:	86 e0       	ldi	r24, 0x06	; 6
 93c:	ec e6       	ldi	r30, 0x6C	; 108
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	01 90       	ld	r0, Z+
 942:	0d 92       	st	X+, r0
 944:	8a 95       	dec	r24
 946:	e1 f7       	brne	.-8      	; 0x940 <main+0x52>
 948:	8b e0       	ldi	r24, 0x0B	; 11
 94a:	e3 e7       	ldi	r30, 0x73	; 115
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	de 01       	movw	r26, r28
 950:	18 96       	adiw	r26, 0x08	; 8
 952:	01 90       	ld	r0, Z+
 954:	0d 92       	st	X+, r0
 956:	8a 95       	dec	r24
 958:	e1 f7       	brne	.-8      	; 0x952 <main+0x64>
 95a:	93 e3       	ldi	r25, 0x33	; 51
 95c:	9b 8b       	std	Y+19, r25	; 0x13
 95e:	80 e3       	ldi	r24, 0x30	; 48
 960:	8c 8b       	std	Y+20, r24	; 0x14
 962:	28 e0       	ldi	r18, 0x08	; 8
 964:	ef e7       	ldi	r30, 0x7F	; 127
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	de 01       	movw	r26, r28
 96a:	55 96       	adiw	r26, 0x15	; 21
 96c:	01 90       	ld	r0, Z+
 96e:	0d 92       	st	X+, r0
 970:	2a 95       	dec	r18
 972:	e1 f7       	brne	.-8      	; 0x96c <main+0x7e>
 974:	fe 01       	movw	r30, r28
 976:	7d 96       	adiw	r30, 0x1d	; 29
 978:	27 e0       	ldi	r18, 0x07	; 7
 97a:	df 01       	movw	r26, r30
 97c:	1d 92       	st	X+, r1
 97e:	2a 95       	dec	r18
 980:	e9 f7       	brne	.-6      	; 0x97c <main+0x8e>
 982:	26 e0       	ldi	r18, 0x06	; 6
 984:	ee e8       	ldi	r30, 0x8E	; 142
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	de 01       	movw	r26, r28
 98a:	94 96       	adiw	r26, 0x24	; 36
 98c:	01 90       	ld	r0, Z+
 98e:	0d 92       	st	X+, r0
 990:	2a 95       	dec	r18
 992:	e1 f7       	brne	.-8      	; 0x98c <main+0x9e>
 994:	2b e0       	ldi	r18, 0x0B	; 11
 996:	e5 e9       	ldi	r30, 0x95	; 149
 998:	f0 e0       	ldi	r31, 0x00	; 0
 99a:	de 01       	movw	r26, r28
 99c:	9a 96       	adiw	r26, 0x2a	; 42
 99e:	01 90       	ld	r0, Z+
 9a0:	0d 92       	st	X+, r0
 9a2:	2a 95       	dec	r18
 9a4:	e1 f7       	brne	.-8      	; 0x99e <main+0xb0>
 9a6:	8d ab       	std	Y+53, r24	; 0x35
 9a8:	22 e3       	ldi	r18, 0x32	; 50
 9aa:	2e ab       	std	Y+54, r18	; 0x36
 9ac:	27 e0       	ldi	r18, 0x07	; 7
 9ae:	e1 ea       	ldi	r30, 0xA1	; 161
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	de 01       	movw	r26, r28
 9b4:	d7 96       	adiw	r26, 0x37	; 55
 9b6:	01 90       	ld	r0, Z+
 9b8:	0d 92       	st	X+, r0
 9ba:	2a 95       	dec	r18
 9bc:	e1 f7       	brne	.-8      	; 0x9b6 <main+0xc8>
 9be:	fe 01       	movw	r30, r28
 9c0:	fe 96       	adiw	r30, 0x3e	; 62
 9c2:	28 e0       	ldi	r18, 0x08	; 8
 9c4:	df 01       	movw	r26, r30
 9c6:	1d 92       	st	X+, r1
 9c8:	2a 95       	dec	r18
 9ca:	e9 f7       	brne	.-6      	; 0x9c6 <main+0xd8>
 9cc:	26 e0       	ldi	r18, 0x06	; 6
 9ce:	e0 eb       	ldi	r30, 0xB0	; 176
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	de 01       	movw	r26, r28
 9d4:	aa 5b       	subi	r26, 0xBA	; 186
 9d6:	bf 4f       	sbci	r27, 0xFF	; 255
 9d8:	01 90       	ld	r0, Z+
 9da:	0d 92       	st	X+, r0
 9dc:	2a 95       	dec	r18
 9de:	e1 f7       	brne	.-8      	; 0x9d8 <main+0xea>
 9e0:	2b e0       	ldi	r18, 0x0B	; 11
 9e2:	e5 e9       	ldi	r30, 0x95	; 149
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	de 01       	movw	r26, r28
 9e8:	a4 5b       	subi	r26, 0xB4	; 180
 9ea:	bf 4f       	sbci	r27, 0xFF	; 255
 9ec:	01 90       	ld	r0, Z+
 9ee:	0d 92       	st	X+, r0
 9f0:	2a 95       	dec	r18
 9f2:	e1 f7       	brne	.-8      	; 0x9ec <main+0xfe>
 9f4:	68 96       	adiw	r28, 0x18	; 24
 9f6:	8f af       	std	Y+63, r24	; 0x3f
 9f8:	68 97       	sbiw	r28, 0x18	; 24
 9fa:	69 96       	adiw	r28, 0x19	; 25
 9fc:	9f af       	std	Y+63, r25	; 0x3f
 9fe:	69 97       	sbiw	r28, 0x19	; 25
 a00:	96 e0       	ldi	r25, 0x06	; 6
 a02:	e7 eb       	ldi	r30, 0xB7	; 183
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	de 01       	movw	r26, r28
 a08:	a7 5a       	subi	r26, 0xA7	; 167
 a0a:	bf 4f       	sbci	r27, 0xFF	; 255
 a0c:	01 90       	ld	r0, Z+
 a0e:	0d 92       	st	X+, r0
 a10:	9a 95       	dec	r25
 a12:	e1 f7       	brne	.-8      	; 0xa0c <main+0x11e>
 a14:	99 e0       	ldi	r25, 0x09	; 9
 a16:	e9 e5       	ldi	r30, 0x59	; 89
 a18:	f0 e0       	ldi	r31, 0x00	; 0
 a1a:	ec 0f       	add	r30, r28
 a1c:	fd 1f       	adc	r31, r29
 a1e:	36 96       	adiw	r30, 0x06	; 6
 a20:	df 01       	movw	r26, r30
 a22:	29 2f       	mov	r18, r25
 a24:	1d 92       	st	X+, r1
 a26:	2a 95       	dec	r18
 a28:	e9 f7       	brne	.-6      	; 0xa24 <main+0x136>
 a2a:	26 e0       	ldi	r18, 0x06	; 6
 a2c:	e6 ec       	ldi	r30, 0xC6	; 198
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	de 01       	movw	r26, r28
 a32:	a8 59       	subi	r26, 0x98	; 152
 a34:	bf 4f       	sbci	r27, 0xFF	; 255
 a36:	01 90       	ld	r0, Z+
 a38:	0d 92       	st	X+, r0
 a3a:	2a 95       	dec	r18
 a3c:	e1 f7       	brne	.-8      	; 0xa36 <main+0x148>
 a3e:	2b e0       	ldi	r18, 0x0B	; 11
 a40:	e5 e9       	ldi	r30, 0x95	; 149
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	de 01       	movw	r26, r28
 a46:	a2 59       	subi	r26, 0x92	; 146
 a48:	bf 4f       	sbci	r27, 0xFF	; 255
 a4a:	01 90       	ld	r0, Z+
 a4c:	0d 92       	st	X+, r0
 a4e:	2a 95       	dec	r18
 a50:	e1 f7       	brne	.-8      	; 0xa4a <main+0x15c>
 a52:	ea 96       	adiw	r28, 0x3a	; 58
 a54:	8f af       	std	Y+63, r24	; 0x3f
 a56:	ea 97       	sbiw	r28, 0x3a	; 58
 a58:	24 e3       	ldi	r18, 0x34	; 52
 a5a:	eb 96       	adiw	r28, 0x3b	; 59
 a5c:	2f af       	std	Y+63, r18	; 0x3f
 a5e:	eb 97       	sbiw	r28, 0x3b	; 59
 a60:	25 e0       	ldi	r18, 0x05	; 5
 a62:	ed ec       	ldi	r30, 0xCD	; 205
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	de 01       	movw	r26, r28
 a68:	a5 58       	subi	r26, 0x85	; 133
 a6a:	bf 4f       	sbci	r27, 0xFF	; 255
 a6c:	01 90       	ld	r0, Z+
 a6e:	0d 92       	st	X+, r0
 a70:	2a 95       	dec	r18
 a72:	e1 f7       	brne	.-8      	; 0xa6c <main+0x17e>
 a74:	eb e7       	ldi	r30, 0x7B	; 123
 a76:	f0 e0       	ldi	r31, 0x00	; 0
 a78:	ec 0f       	add	r30, r28
 a7a:	fd 1f       	adc	r31, r29
 a7c:	35 96       	adiw	r30, 0x05	; 5
 a7e:	2a e0       	ldi	r18, 0x0A	; 10
 a80:	df 01       	movw	r26, r30
 a82:	1d 92       	st	X+, r1
 a84:	2a 95       	dec	r18
 a86:	e9 f7       	brne	.-6      	; 0xa82 <main+0x194>
 a88:	26 e0       	ldi	r18, 0x06	; 6
 a8a:	ec ed       	ldi	r30, 0xDC	; 220
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	de 01       	movw	r26, r28
 a90:	a6 57       	subi	r26, 0x76	; 118
 a92:	bf 4f       	sbci	r27, 0xFF	; 255
 a94:	01 90       	ld	r0, Z+
 a96:	0d 92       	st	X+, r0
 a98:	2a 95       	dec	r18
 a9a:	e1 f7       	brne	.-8      	; 0xa94 <main+0x1a6>
 a9c:	2b e0       	ldi	r18, 0x0B	; 11
 a9e:	e5 e9       	ldi	r30, 0x95	; 149
 aa0:	f0 e0       	ldi	r31, 0x00	; 0
 aa2:	de 01       	movw	r26, r28
 aa4:	a0 57       	subi	r26, 0x70	; 112
 aa6:	bf 4f       	sbci	r27, 0xFF	; 255
 aa8:	01 90       	ld	r0, Z+
 aaa:	0d 92       	st	X+, r0
 aac:	2a 95       	dec	r18
 aae:	e1 f7       	brne	.-8      	; 0xaa8 <main+0x1ba>
 ab0:	c5 56       	subi	r28, 0x65	; 101
 ab2:	df 4f       	sbci	r29, 0xFF	; 255
 ab4:	88 83       	st	Y, r24
 ab6:	cb 59       	subi	r28, 0x9B	; 155
 ab8:	d0 40       	sbci	r29, 0x00	; 0
 aba:	85 e3       	ldi	r24, 0x35	; 53
 abc:	c4 56       	subi	r28, 0x64	; 100
 abe:	df 4f       	sbci	r29, 0xFF	; 255
 ac0:	88 83       	st	Y, r24
 ac2:	cc 59       	subi	r28, 0x9C	; 156
 ac4:	d0 40       	sbci	r29, 0x00	; 0
 ac6:	86 e0       	ldi	r24, 0x06	; 6
 ac8:	e3 ee       	ldi	r30, 0xE3	; 227
 aca:	f0 e0       	ldi	r31, 0x00	; 0
 acc:	de 01       	movw	r26, r28
 ace:	a3 56       	subi	r26, 0x63	; 99
 ad0:	bf 4f       	sbci	r27, 0xFF	; 255
 ad2:	01 90       	ld	r0, Z+
 ad4:	0d 92       	st	X+, r0
 ad6:	8a 95       	dec	r24
 ad8:	e1 f7       	brne	.-8      	; 0xad2 <main+0x1e4>
 ada:	ed e9       	ldi	r30, 0x9D	; 157
 adc:	f0 e0       	ldi	r31, 0x00	; 0
 ade:	ec 0f       	add	r30, r28
 ae0:	fd 1f       	adc	r31, r29
 ae2:	36 96       	adiw	r30, 0x06	; 6
 ae4:	df 01       	movw	r26, r30
 ae6:	1d 92       	st	X+, r1
 ae8:	9a 95       	dec	r25
 aea:	e9 f7       	brne	.-6      	; 0xae6 <main+0x1f8>
	};
	
	
    while(1)
    {
		LCD_DisplayString("Enter Password");
 aec:	8e e1       	ldi	r24, 0x1E	; 30
 aee:	91 e0       	ldi	r25, 0x01	; 1
 af0:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_DisplayString>
		uint8_t password[6];
		uint8_t RESULT = Enter_password(password);
 af4:	ce 01       	movw	r24, r28
 af6:	82 53       	subi	r24, 0x32	; 50
 af8:	9f 4f       	sbci	r25, 0xFF	; 255
 afa:	0e 94 90 02 	call	0x520	; 0x520 <Enter_password>
		if (RESULT ==OK)
 afe:	8a 32       	cpi	r24, 0x2A	; 42
 b00:	79 f4       	brne	.+30     	; 0xb20 <main+0x232>
		{
			Match_Password(password,AllPasswords,relay,Internet_State_Ptr);
 b02:	8e 01       	movw	r16, r28
 b04:	0f 5f       	subi	r16, 0xFF	; 255
 b06:	1f 4f       	sbci	r17, 0xFF	; 255
 b08:	2c 2d       	mov	r18, r12
 b0a:	3d 2d       	mov	r19, r13
 b0c:	4e 2d       	mov	r20, r14
 b0e:	5f 2d       	mov	r21, r15
 b10:	be 01       	movw	r22, r28
 b12:	6e 5f       	subi	r22, 0xFE	; 254
 b14:	7f 4f       	sbci	r23, 0xFF	; 255
 b16:	ce 01       	movw	r24, r28
 b18:	82 53       	subi	r24, 0x32	; 50
 b1a:	9f 4f       	sbci	r25, 0xFF	; 255
 b1c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <Match_Password>
 b20:	bf ef       	ldi	r27, 0xFF	; 255
 b22:	e9 e6       	ldi	r30, 0x69	; 105
 b24:	f8 e1       	ldi	r31, 0x18	; 24
 b26:	b1 50       	subi	r27, 0x01	; 1
 b28:	e0 40       	sbci	r30, 0x00	; 0
 b2a:	f0 40       	sbci	r31, 0x00	; 0
 b2c:	e1 f7       	brne	.-8      	; 0xb26 <main+0x238>
 b2e:	00 c0       	rjmp	.+0      	; 0xb30 <main+0x242>
 b30:	00 00       	nop
		}
		_delay_ms(500);
	

    }
 b32:	dc cf       	rjmp	.-72     	; 0xaec <main+0x1fe>

00000b34 <__tablejump2__>:
 b34:	ee 0f       	add	r30, r30
 b36:	ff 1f       	adc	r31, r31

00000b38 <__tablejump__>:
 b38:	05 90       	lpm	r0, Z+
 b3a:	f4 91       	lpm	r31, Z
 b3c:	e0 2d       	mov	r30, r0
 b3e:	09 94       	ijmp

00000b40 <_exit>:
 b40:	f8 94       	cli

00000b42 <__stop_program>:
 b42:	ff cf       	rjmp	.-2      	; 0xb42 <__stop_program>
